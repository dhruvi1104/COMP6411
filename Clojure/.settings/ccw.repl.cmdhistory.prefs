cmdhistory=["1" "2" "(defn Read []\\r\\n  (with-open [rdr (clojure.java.io/reader \\"cust.txt\\")]\\r\\n  (reduce conj [] (line-seq rdr))))\\r\\n(Read)" "(println \\"***Sales Menu***\\")\\r\\n(println \\"----------------------\\")\\r\\n(println \\"1. Display Customer Table\\")\\r\\n(println \\"2. Display Product Table\\")\\r\\n(println \\"3. Display Sales Table\\")\\r\\n(println \\"4. Total Sales For Customer\\")\\r\\n(println \\"5. Total Count For Product\\")\\r\\n(println \\"6. Exit\\")\\r\\n(println \\"Enter an Option \:\\")\\r\\n(def option (Integer/parseInt (read-line)))\\r\\n\\r\\n;(println option)\\r\\n\\r\\n(case option\\r\\n  1 \:\\"cust table\\"\\r\\n  2 \:\\"product table\\"\\r\\n  3 \:\\"sales table\\"\\r\\n  4 \:\\"for cuust\\"\\r\\n  5 \:\\"for prod\\"\\r\\n  \:\\"error\\"\\r\\n  )" "1" "(clojure.string/split \\"a,b,c,d,e\\" \#\\",\\")" "(defn Read []\\r\\n(with-open [rdr (clojure.java.io/reader \\"cust.txt\\")]\\r\\n (str/split (line-seq rdr) \#\\"|\\")))" "string2" "string3" "string2" "string3" "string2" "string3" "string2" "cust" "string2" "s3" "1" "string2" "string2 0" "(string2 0)" "string2" "(string2 0)" "(first string2)" "(rest string2)" "(first (string2 0))" "(rest (string2 0))" "prod1" "(first (prod 0))" "cust1" "(first (cust 0))" "(rest (cust 0))" " (def cust1 (map \#(hash-map \:'(first (%)) (rest (%))) cust))" "(println cust1)" "(def cust1 (map \#(hash-map \:'(first %) (rest %)) cust))" "(println cust1)" "(keys cust)" "(get cust 1)" "(get cust \\"1\\")" "(keys cust)" "(get cust \:1)" "(get cust \\"1\\")" "(cust \\"1\\")" "(cust \:1)" "(cust 1)" "(get cust \:1)" "(cust \:1)" "(find cust 1)" "(find cust \:1)" "(find cust \\"1\\")" "(def x (map \#(str/split (get sale %) \#\\",\\") (keys sale)))" "(println x)" "x" "(type (nth custidinsale a))" "(type custid)"]
eclipse.preferences.version=1
